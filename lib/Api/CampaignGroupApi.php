<?php
/**
 * CampaignGroupApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cervinodata API documentation
 *
 * <div style='margin: 2em 0;'> <p> Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>). </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CampaignGroupApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignGroupApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCampaignGroupAdReportPerOrganisationPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek' => [
            'application/json',
        ],
        'getCampaignGroupAdReportPerOrganisationPerDay' => [
            'application/json',
        ],
        'getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay' => [
            'application/json',
        ],
        'getCampaignGroupAnalyticsReportPerOrganisationPerDay' => [
            'application/json',
        ],
        'getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay' => [
            'application/json',
        ],
        'getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay' => [
            'application/json',
        ],
        'getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay' => [
            'application/json',
        ],
        'getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupGoalReportPerOrganisationPerDay' => [
            'application/json',
        ],
        'getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay' => [
            'application/json',
        ],
        'getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupReportPerOrganisationPerDay' => [
            'application/json',
        ],
        'getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay' => [
            'application/json',
        ],
        'getCampaignGroupVideoReportPerOrganisationPerDay' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerDay
     *
     * Return campaign group ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerDayAsync
     *
     * Return campaign group ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAdReportPerOrganisationPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek
     *
     * Return campaign group ad report per organisation per campaign per week
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'][0])
    {
        list($response) = $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithHttpInfo
     *
     * Return campaign group ad report per organisation per campaign per week
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'][0])
    {
        $request = $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekAsync
     *
     * Return campaign group ad report per organisation per campaign per week
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'][0])
    {
        return $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekAsyncWithHttpInfo
     *
     * Return campaign group ad report per organisation per campaign per week
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek'
            );
        }





        $resourcePath = '/data/campaign-group-ad-report-per-organisation-per-campaign-per-week/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerDay
     *
     * Return campaign group ad report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAdReportPerOrganisationPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'][0])
    {
        list($response) = $this->getCampaignGroupAdReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerDayWithHttpInfo
     *
     * Return campaign group ad report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAdReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'][0])
    {
        $request = $this->getCampaignGroupAdReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerDayAsync
     *
     * Return campaign group ad report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdReportPerOrganisationPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'][0])
    {
        return $this->getCampaignGroupAdReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAdReportPerOrganisationPerDayAsyncWithHttpInfo
     *
     * Return campaign group ad report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAdReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAdReportPerOrganisationPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAdReportPerOrganisationPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdReportPerOrganisationPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAdReportPerOrganisationPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-ad-report-per-organisation-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group adform extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group adform extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group adform extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group adform extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-adform-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay
     *
     * Return campaign group adform report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group adform report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayAsync
     *
     * Return campaign group adform report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group adform report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-adform-report-per-organisation-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay
     *
     * Return campaign group adform report per organisation per campaign per line-item per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'][0])
    {
        list($response) = $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithHttpInfo
     *
     * Return campaign group adform report per organisation per campaign per line-item per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'][0])
    {
        $request = $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayAsync
     *
     * Return campaign group adform report per organisation per campaign per line-item per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'][0])
    {
        return $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayAsyncWithHttpInfo
     *
     * Return campaign group adform report per organisation per campaign per line-item per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-adform-report-per-organisation-per-campaign-per-line-item-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupAnalyticsReportPerOrganisationPerDay
     *
     * Return campaign group analytics report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupAnalyticsReportPerOrganisationPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'][0])
    {
        list($response) = $this->getCampaignGroupAnalyticsReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupAnalyticsReportPerOrganisationPerDayWithHttpInfo
     *
     * Return campaign group analytics report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupAnalyticsReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'][0])
    {
        $request = $this->getCampaignGroupAnalyticsReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupAnalyticsReportPerOrganisationPerDayAsync
     *
     * Return campaign group analytics report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAnalyticsReportPerOrganisationPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'][0])
    {
        return $this->getCampaignGroupAnalyticsReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupAnalyticsReportPerOrganisationPerDayAsyncWithHttpInfo
     *
     * Return campaign group analytics report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupAnalyticsReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupAnalyticsReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupAnalyticsReportPerOrganisationPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupAnalyticsReportPerOrganisationPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupAnalyticsReportPerOrganisationPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupAnalyticsReportPerOrganisationPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-analytics-report-per-organisation-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'][0])
    {
        list($response) = $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithHttpInfo
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'][0])
    {
        $request = $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayAsync
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'][0])
    {
        return $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayAsyncWithHttpInfo
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay'
            );
        }





        $resourcePath = '/data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-creative-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-doubleclick-campaign-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        list($response) = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        $request = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsync
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        return $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsyncWithHttpInfo
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'][0])
    {
        list($response) = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithHttpInfo
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'][0])
    {
        $request = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayAsync
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'][0])
    {
        return $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayAsyncWithHttpInfo
     *
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay
     *
     * Return campaign group facebook ad extended report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group facebook ad extended report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayAsync
     *
     * Return campaign group facebook ad extended report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group facebook ad extended report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-facebook-ad-extended-report-per-organisation-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay
     *
     * Return campaign group facebook ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group facebook ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayAsync
     *
     * Return campaign group facebook ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group facebook ad report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-facebook-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupGoalReportPerOrganisationPerDay
     *
     * Return campaign group goal report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupGoalReportPerOrganisationPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'][0])
    {
        list($response) = $this->getCampaignGroupGoalReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupGoalReportPerOrganisationPerDayWithHttpInfo
     *
     * Return campaign group goal report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupGoalReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'][0])
    {
        $request = $this->getCampaignGroupGoalReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupGoalReportPerOrganisationPerDayAsync
     *
     * Return campaign group goal report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupGoalReportPerOrganisationPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'][0])
    {
        return $this->getCampaignGroupGoalReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupGoalReportPerOrganisationPerDayAsyncWithHttpInfo
     *
     * Return campaign group goal report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupGoalReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupGoalReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupGoalReportPerOrganisationPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupGoalReportPerOrganisationPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoalReportPerOrganisationPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupGoalReportPerOrganisationPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-goal-report-per-organisation-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay
     *
     * Return campaign group google ads extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        list($response) = $this->getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo
     *
     * Return campaign group google ads extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        $request = $this->getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsync
     *
     * Return campaign group google ads extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        return $this->getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsyncWithHttpInfo
     *
     * Return campaign group google ads extended report per organisation per account per campaign per ad group per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-google-ads-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay
     *
     * Return campaign group google ads report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group google ads report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayAsync
     *
     * Return campaign group google ads report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group google ads report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-google-ads-report-per-organisation-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group pinterest ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group pinterest ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group pinterest ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group pinterest ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-pinterest-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupReportPerOrganisationPerDay
     *
     * Return campaign group report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupReportPerOrganisationPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'][0])
    {
        list($response) = $this->getCampaignGroupReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupReportPerOrganisationPerDayWithHttpInfo
     *
     * Return campaign group report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'][0])
    {
        $request = $this->getCampaignGroupReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupReportPerOrganisationPerDayAsync
     *
     * Return campaign group report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupReportPerOrganisationPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'][0])
    {
        return $this->getCampaignGroupReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupReportPerOrganisationPerDayAsyncWithHttpInfo
     *
     * Return campaign group report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupReportPerOrganisationPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupReportPerOrganisationPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupReportPerOrganisationPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupReportPerOrganisationPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-report-per-organisation-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group tiktok ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group tiktok ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group tiktok ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group tiktok ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-tiktok-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return campaign group twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return campaign group twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay
     *
     * Return campaign group video report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'][0])
    {
        list($response) = $this->getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithHttpInfo
     *
     * Return campaign group video report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'][0])
    {
        $request = $this->getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayAsync
     *
     * Return campaign group video report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'][0])
    {
        return $this->getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return campaign group video report per organisation per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-video-report-per-organisation-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerDay
     *
     * Return campaign group video report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCampaignGroupVideoReportPerOrganisationPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'][0])
    {
        list($response) = $this->getCampaignGroupVideoReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerDayWithHttpInfo
     *
     * Return campaign group video report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignGroupVideoReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'][0])
    {
        $request = $this->getCampaignGroupVideoReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerDayAsync
     *
     * Return campaign group video report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupVideoReportPerOrganisationPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'][0])
    {
        return $this->getCampaignGroupVideoReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignGroupVideoReportPerOrganisationPerDayAsyncWithHttpInfo
     *
     * Return campaign group video report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignGroupVideoReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getCampaignGroupVideoReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignGroupVideoReportPerOrganisationPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignGroupVideoReportPerOrganisationPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getCampaignGroupVideoReportPerOrganisationPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getCampaignGroupVideoReportPerOrganisationPerDay'
            );
        }





        $resourcePath = '/data/campaign-group-video-report-per-organisation-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
