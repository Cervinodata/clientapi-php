<?php
/**
 * AnalyticsDataGoalsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cervinodata API documentation
 *
 * <div style='margin: 2em 0;'>  <p>  Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>).  </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/en-nl/articles/360009250458-Limits-for-Free-plan-users' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AnalyticsDataGoalsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalyticsDataGoalsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAnalyticsGoalReportPerCampaignPerDay
     *
     * Return analytics goal report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsGoalReportPerCampaignPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAnalyticsGoalReportPerCampaignPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAnalyticsGoalReportPerCampaignPerDayWithHttpInfo
     *
     * Return analytics goal report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsGoalReportPerCampaignPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAnalyticsGoalReportPerCampaignPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsGoalReportPerCampaignPerDayAsync
     *
     * Return analytics goal report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerCampaignPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAnalyticsGoalReportPerCampaignPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsGoalReportPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return analytics goal report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerCampaignPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAnalyticsGoalReportPerCampaignPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsGoalReportPerCampaignPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsGoalReportPerCampaignPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsGoalReportPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/analytics-goal-report-per-campaign-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsGoalReportPerChannelGroupPerDay
     *
     * Return analytics goal report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsGoalReportPerChannelGroupPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAnalyticsGoalReportPerChannelGroupPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAnalyticsGoalReportPerChannelGroupPerDayWithHttpInfo
     *
     * Return analytics goal report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsGoalReportPerChannelGroupPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAnalyticsGoalReportPerChannelGroupPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsGoalReportPerChannelGroupPerDayAsync
     *
     * Return analytics goal report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerChannelGroupPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAnalyticsGoalReportPerChannelGroupPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsGoalReportPerChannelGroupPerDayAsyncWithHttpInfo
     *
     * Return analytics goal report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerChannelGroupPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAnalyticsGoalReportPerChannelGroupPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsGoalReportPerChannelGroupPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsGoalReportPerChannelGroupPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsGoalReportPerChannelGroupPerDay'
            );
        }

        $resourcePath = '/data/analytics-goal-report-per-channel-group-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsGoalReportPerDevicePerDay
     *
     * Return analytics goal report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsGoalReportPerDevicePerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAnalyticsGoalReportPerDevicePerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAnalyticsGoalReportPerDevicePerDayWithHttpInfo
     *
     * Return analytics goal report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsGoalReportPerDevicePerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAnalyticsGoalReportPerDevicePerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsGoalReportPerDevicePerDayAsync
     *
     * Return analytics goal report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerDevicePerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAnalyticsGoalReportPerDevicePerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsGoalReportPerDevicePerDayAsyncWithHttpInfo
     *
     * Return analytics goal report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerDevicePerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAnalyticsGoalReportPerDevicePerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsGoalReportPerDevicePerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsGoalReportPerDevicePerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsGoalReportPerDevicePerDay'
            );
        }

        $resourcePath = '/data/analytics-goal-report-per-device-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsGoalReportPerSourceMediumPerDay
     *
     * Return analytics goal report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsGoalReportPerSourceMediumPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAnalyticsGoalReportPerSourceMediumPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAnalyticsGoalReportPerSourceMediumPerDayWithHttpInfo
     *
     * Return analytics goal report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsGoalReportPerSourceMediumPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAnalyticsGoalReportPerSourceMediumPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsGoalReportPerSourceMediumPerDayAsync
     *
     * Return analytics goal report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerSourceMediumPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAnalyticsGoalReportPerSourceMediumPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsGoalReportPerSourceMediumPerDayAsyncWithHttpInfo
     *
     * Return analytics goal report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsGoalReportPerSourceMediumPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAnalyticsGoalReportPerSourceMediumPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsGoalReportPerSourceMediumPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsGoalReportPerSourceMediumPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsGoalReportPerSourceMediumPerDay'
            );
        }

        $resourcePath = '/data/analytics-goal-report-per-source-medium-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
