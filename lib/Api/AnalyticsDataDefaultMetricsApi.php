<?php
/**
 * AnalyticsDataDefaultMetricsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cervinodata API documentation
 *
 * <div style='margin: 2em 0;'> <p> Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>). </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AnalyticsDataDefaultMetricsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalyticsDataDefaultMetricsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAnalyticsReportPerCampaignPerDay' => [
            'application/json',
        ],
        'getAnalyticsReportPerChannelGroupPerDay' => [
            'application/json',
        ],
        'getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay' => [
            'application/json',
        ],
        'getAnalyticsReportPerDevicePerDay' => [
            'application/json',
        ],
        'getAnalyticsReportPerSourceMediumPerDay' => [
            'application/json',
        ],
        'getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAnalyticsReportPerCampaignPerDay
     *
     * Return analytics report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsReportPerCampaignPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerCampaignPerDay'][0])
    {
        list($response) = $this->getAnalyticsReportPerCampaignPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAnalyticsReportPerCampaignPerDayWithHttpInfo
     *
     * Return analytics report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsReportPerCampaignPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerCampaignPerDay'][0])
    {
        $request = $this->getAnalyticsReportPerCampaignPerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsReportPerCampaignPerDayAsync
     *
     * Return analytics report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerCampaignPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerCampaignPerDay'][0])
    {
        return $this->getAnalyticsReportPerCampaignPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsReportPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return analytics report per campaign per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerCampaignPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerCampaignPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getAnalyticsReportPerCampaignPerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsReportPerCampaignPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerCampaignPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsReportPerCampaignPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerCampaignPerDay'][0])
    {

        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsReportPerCampaignPerDay'
            );
        }





        $resourcePath = '/data/analytics-report-per-campaign-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsReportPerChannelGroupPerDay
     *
     * Return analytics report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsReportPerChannelGroupPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'][0])
    {
        list($response) = $this->getAnalyticsReportPerChannelGroupPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAnalyticsReportPerChannelGroupPerDayWithHttpInfo
     *
     * Return analytics report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsReportPerChannelGroupPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'][0])
    {
        $request = $this->getAnalyticsReportPerChannelGroupPerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsReportPerChannelGroupPerDayAsync
     *
     * Return analytics report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerChannelGroupPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'][0])
    {
        return $this->getAnalyticsReportPerChannelGroupPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsReportPerChannelGroupPerDayAsyncWithHttpInfo
     *
     * Return analytics report per channel group per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerChannelGroupPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getAnalyticsReportPerChannelGroupPerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsReportPerChannelGroupPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsReportPerChannelGroupPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerChannelGroupPerDay'][0])
    {

        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsReportPerChannelGroupPerDay'
            );
        }





        $resourcePath = '/data/analytics-report-per-channel-group-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay
     *
     * Return analytics report per device per channel group per organisation per view per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'][0])
    {
        list($response) = $this->getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithHttpInfo
     *
     * Return analytics report per device per channel group per organisation per view per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'][0])
    {
        $request = $this->getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayAsync
     *
     * Return analytics report per device per channel group per organisation per view per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'][0])
    {
        return $this->getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayAsyncWithHttpInfo
     *
     * Return analytics report per device per channel group per organisation per view per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay'
            );
        }





        $resourcePath = '/data/analytics-report-per-device-per-channel-group-per-organisation-per-view-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsReportPerDevicePerDay
     *
     * Return analytics report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsReportPerDevicePerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerDay'][0])
    {
        list($response) = $this->getAnalyticsReportPerDevicePerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAnalyticsReportPerDevicePerDayWithHttpInfo
     *
     * Return analytics report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsReportPerDevicePerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerDay'][0])
    {
        $request = $this->getAnalyticsReportPerDevicePerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsReportPerDevicePerDayAsync
     *
     * Return analytics report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerDevicePerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerDay'][0])
    {
        return $this->getAnalyticsReportPerDevicePerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsReportPerDevicePerDayAsyncWithHttpInfo
     *
     * Return analytics report per device per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerDevicePerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getAnalyticsReportPerDevicePerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsReportPerDevicePerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerDevicePerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsReportPerDevicePerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerDevicePerDay'][0])
    {

        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsReportPerDevicePerDay'
            );
        }





        $resourcePath = '/data/analytics-report-per-device-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalyticsReportPerSourceMediumPerDay
     *
     * Return analytics report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAnalyticsReportPerSourceMediumPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'][0])
    {
        list($response) = $this->getAnalyticsReportPerSourceMediumPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAnalyticsReportPerSourceMediumPerDayWithHttpInfo
     *
     * Return analytics report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalyticsReportPerSourceMediumPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'][0])
    {
        $request = $this->getAnalyticsReportPerSourceMediumPerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalyticsReportPerSourceMediumPerDayAsync
     *
     * Return analytics report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerSourceMediumPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'][0])
    {
        return $this->getAnalyticsReportPerSourceMediumPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalyticsReportPerSourceMediumPerDayAsyncWithHttpInfo
     *
     * Return analytics report per source medium per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnalyticsReportPerSourceMediumPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getAnalyticsReportPerSourceMediumPerDayRequest($organisation_uuid, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalyticsReportPerSourceMediumPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalyticsReportPerSourceMediumPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getAnalyticsReportPerSourceMediumPerDay'][0])
    {

        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAnalyticsReportPerSourceMediumPerDay'
            );
        }





        $resourcePath = '/data/analytics-report-per-source-medium-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay
     *
     * Return GA4 report per device per channel group per organisation per property per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'][0])
    {
        list($response) = $this->getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType);
        return $response;
    }

    /**
     * Operation getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayWithHttpInfo
     *
     * Return GA4 report per device per channel group per organisation per property per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'][0])
    {
        $request = $this->getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayAsync
     *
     * Return GA4 report per device per channel group per organisation per property per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'][0])
    {
        return $this->getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayAsyncWithHttpInfo
     *
     * Return GA4 report per device per channel group per organisation per property per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'][0])
    {
        $returnType = 'string';
        $request = $this->getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayRequest($organisation_uuids, $from_date, $date_format, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null, string $contentType = self::contentTypes['getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'][0])
    {

        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay'
            );
        }





        $resourcePath = '/data/ga4-report-per-device-per-channel-group-per-organisation-per-property-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_format,
            'date_format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
