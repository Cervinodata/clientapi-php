<?php
/**
 * AdvertisingDataApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cervinodata API documentation
 *
 * <div style='margin: 2em 0;'>  <p>  Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>).  </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AdvertisingDataApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvertisingDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAdAccountReportPerOrganisationPerDay
     *
     * Return ad account report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdAccountReportPerOrganisationPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAdAccountReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAdAccountReportPerOrganisationPerDayWithHttpInfo
     *
     * Return ad account report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdAccountReportPerOrganisationPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAdAccountReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdAccountReportPerOrganisationPerDayAsync
     *
     * Return ad account report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAccountReportPerOrganisationPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAdAccountReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdAccountReportPerOrganisationPerDayAsyncWithHttpInfo
     *
     * Return ad account report per organisation per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAccountReportPerOrganisationPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAdAccountReportPerOrganisationPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdAccountReportPerOrganisationPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdAccountReportPerOrganisationPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getAdAccountReportPerOrganisationPerDay'
            );
        }

        $resourcePath = '/data/ad-account-report-per-organisation-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdAccounts
     *
     * Return ad accounts by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  string $format Output format (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdAccounts($organisation_uuid, $format = null)
    {
        list($response) = $this->getAdAccountsWithHttpInfo($organisation_uuid, $format);
        return $response;
    }

    /**
     * Operation getAdAccountsWithHttpInfo
     *
     * Return ad accounts by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  string $format Output format (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdAccountsWithHttpInfo($organisation_uuid, $format = null)
    {
        $request = $this->getAdAccountsRequest($organisation_uuid, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdAccountsAsync
     *
     * Return ad accounts by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  string $format Output format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAccountsAsync($organisation_uuid, $format = null)
    {
        return $this->getAdAccountsAsyncWithHttpInfo($organisation_uuid, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdAccountsAsyncWithHttpInfo
     *
     * Return ad accounts by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  string $format Output format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAccountsAsyncWithHttpInfo($organisation_uuid, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAdAccountsRequest($organisation_uuid, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdAccounts'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  string $format Output format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdAccountsRequest($organisation_uuid, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAdAccounts'
            );
        }

        $resourcePath = '/data/ad-accounts/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdCampaignReportPerDay
     *
     * Return ad campaign report per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdCampaignReportPerDay($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAdCampaignReportPerDayWithHttpInfo($organisation_uuid, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAdCampaignReportPerDayWithHttpInfo
     *
     * Return ad campaign report per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdCampaignReportPerDayWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAdCampaignReportPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdCampaignReportPerDayAsync
     *
     * Return ad campaign report per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignReportPerDayAsync($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAdCampaignReportPerDayAsyncWithHttpInfo($organisation_uuid, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdCampaignReportPerDayAsyncWithHttpInfo
     *
     * Return ad campaign report per day by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignReportPerDayAsyncWithHttpInfo($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAdCampaignReportPerDayRequest($organisation_uuid, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdCampaignReportPerDay'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdCampaignReportPerDayRequest($organisation_uuid, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAdCampaignReportPerDay'
            );
        }

        $resourcePath = '/data/ad-campaign-report-per-day/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay
     *
     * Return ad campaign report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo
     *
     * Return ad campaign report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync
     *
     * Return ad campaign report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo
     *
     * Return ad campaign report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay'
            );
        }

        $resourcePath = '/data/ad-campaign-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerDay
     *
     * Return ad campaign report per organisation per account per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getAdCampaignReportPerOrganisationPerAccountPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerDayWithHttpInfo
     *
     * Return ad campaign report per organisation per account per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getAdCampaignReportPerOrganisationPerAccountPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerDayAsync
     *
     * Return ad campaign report per organisation per account per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getAdCampaignReportPerOrganisationPerAccountPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdCampaignReportPerOrganisationPerAccountPerDayAsyncWithHttpInfo
     *
     * Return ad campaign report per organisation per account per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAdCampaignReportPerOrganisationPerAccountPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdCampaignReportPerOrganisationPerAccountPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdCampaignReportPerOrganisationPerAccountPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getAdCampaignReportPerOrganisationPerAccountPerDay'
            );
        }

        $resourcePath = '/data/ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdCampaigns
     *
     * Return ad campaigns by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $format Output format (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdCampaigns($organisation_uuid, $from_date = null, $format = null)
    {
        list($response) = $this->getAdCampaignsWithHttpInfo($organisation_uuid, $from_date, $format);
        return $response;
    }

    /**
     * Operation getAdCampaignsWithHttpInfo
     *
     * Return ad campaigns by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $format Output format (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdCampaignsWithHttpInfo($organisation_uuid, $from_date = null, $format = null)
    {
        $request = $this->getAdCampaignsRequest($organisation_uuid, $from_date, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdCampaignsAsync
     *
     * Return ad campaigns by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $format Output format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignsAsync($organisation_uuid, $from_date = null, $format = null)
    {
        return $this->getAdCampaignsAsyncWithHttpInfo($organisation_uuid, $from_date, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdCampaignsAsyncWithHttpInfo
     *
     * Return ad campaigns by organisation
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $format Output format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdCampaignsAsyncWithHttpInfo($organisation_uuid, $from_date = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getAdCampaignsRequest($organisation_uuid, $from_date, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdCampaigns'
     *
     * @param  string $organisation_uuid Organisation uuid (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $format Output format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdCampaignsRequest($organisation_uuid, $from_date = null, $format = null)
    {
        // verify the required parameter 'organisation_uuid' is set
        if ($organisation_uuid === null || (is_array($organisation_uuid) && count($organisation_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuid when calling getAdCampaigns'
            );
        }

        $resourcePath = '/data/ad-campaigns/{organisationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if ($organisation_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuid' . '}',
                ObjectSerializer::toPathValue($organisation_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return bing ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return facebook ad custom conversion report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return facebook ad extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return facebook ad extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return facebook ad extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return facebook ad extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay
     *
     * Return facebook ad extended report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo
     *
     * Return facebook ad extended report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync
     *
     * Return facebook ad extended report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo
     *
     * Return facebook ad extended report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay'
            );
        }

        $resourcePath = '/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay
     *
     * Return google ads report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo
     *
     * Return google ads report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync
     *
     * Return google ads report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo
     *
     * Return google ads report per organisation per account per campaign per device per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay'
            );
        }

        $resourcePath = '/data/google-ads-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return linkedin ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return snapchat ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     *
     * Return twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        list($response) = $this->getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date, $date_format, $format);
        return $response;
    }

    /**
     * Operation getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo
     *
     * Return twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $request = $this->getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync
     *
     * Return twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        return $this->getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date, $date_format, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo
     *
     * Return twitter ads extended report per organisation per account per campaign per day
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsyncWithHttpInfo($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        $returnType = 'string';
        $request = $this->getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date, $date_format, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
     *
     * @param  string[] $organisation_uuids Organisation uuids (required)
     * @param  \DateTime $from_date From date (optional)
     * @param  string $date_format Outputted date format (optional)
     * @param  string $format Output format (use csv for large result sets) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayRequest($organisation_uuids, $from_date = null, $date_format = null, $format = null)
    {
        // verify the required parameter 'organisation_uuids' is set
        if ($organisation_uuids === null || (is_array($organisation_uuids) && count($organisation_uuids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation_uuids when calling getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay'
            );
        }

        $resourcePath = '/data/twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from_date'] = $from_date;
            }
        }
        // query params
        if ($date_format !== null) {
            if('form' === 'form' && is_array($date_format)) {
                foreach($date_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date_format'] = $date_format;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }


        // path params
        if (is_array($organisation_uuids)) {
            $organisation_uuids = ObjectSerializer::serializeCollection($organisation_uuids, 'csv');
        }
        if ($organisation_uuids !== null) {
            $resourcePath = str_replace(
                '{' . 'organisationUuids' . '}',
                ObjectSerializer::toPathValue($organisation_uuids),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
